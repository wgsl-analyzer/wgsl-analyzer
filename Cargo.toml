[workspace]
members = [
  "xtask/",
  # "lib/*",
  "crates/*",
]
exclude = ["crates/proc-macro-srv/proc-macro-test/imp"]
resolver = "2"

[workspace.package]
rust-version = "1.85"
edition = "2024"
license = "MIT OR Apache-2.0"
authors = ["wgsl-analyzer team"]
repository = "https://github.com/wgsl-analyzer/wgsl-analyzer"

[profile.dev]
debug = 1

[profile.dev.package]
# These speed up local tests.
rowan.opt-level = 3
rustc-hash.opt-level = 3
smol_str.opt-level = 3
text-size.opt-level = 3
serde.opt-level = 3
salsa.opt-level = 3
# This speeds up `cargo xtask dist`.
# miniz_oxide.opt-level = 3

[profile.release]
incremental = true
# Set this to 1 or 2 to get more useful backtraces in debugger.
debug = 0

[profile.dev-rel]
inherits = "release"
debug = 2

[workspace.dependencies]
# local crates
base-db = { path = "./crates/base_db", version = "0.0.0" }
cfg = { path = "./crates/cfg", version = "0.0.0", features = ["tt"] }
hir = { path = "./crates/hir", version = "0.0.0" }
hir-def = { path = "./crates/hir_def", version = "0.0.0" }
hir-expand = { path = "./crates/hir-expand", version = "0.0.0" }
hir-ty = { path = "./crates/hir_ty", version = "0.0.0" }
ide = { path = "./crates/ide", version = "0.0.0" }
ide-assists = { path = "./crates/ide-assists", version = "0.0.0" }
ide-completion = { path = "./crates/ide_completion", version = "0.0.0" }
ide-db = { path = "./crates/ide-db", version = "0.0.0" }
# ide-diagnostics = { path = "./crates/ide-diagnostics", version = "0.0.0" }
ide-ssr = { path = "./crates/ide-ssr", version = "0.0.0" }
intern = { path = "./crates/intern", version = "0.0.0" }
limit = { path = "./crates/limit", version = "0.0.0" }
load-cargo = { path = "./crates/load-cargo", version = "0.0.0" }
mbe = { path = "./crates/mbe", version = "0.0.0" }
parser = { path = "./crates/parser", version = "0.0.0" }
# paths = { path = "./crates/paths", version = "0.0.0" }
proc-macro-api = { path = "./crates/proc-macro-api", version = "0.0.0" }
proc-macro-srv = { path = "./crates/proc-macro-srv", version = "0.0.0" }
proc-macro-srv-cli = { path = "./crates/proc-macro-srv-cli", version = "0.0.0" }
profile = { path = "./crates/profile", version = "0.0.0" }
# project-model = { path = "./crates/project-model", version = "0.0.0" }
ra-salsa = { path = "./crates/ra-salsa", package = "salsa", version = "0.0.0" }
span = { path = "./crates/span", version = "0.0.0" }
stdx = { path = "./crates/stdx", version = "0.0.0" }
syntax = { path = "./crates/syntax", version = "0.0.0" }
syntax-bridge = { path = "./crates/syntax-bridge", version = "0.0.0" }
# test-fixture = { path = "./crates/test-fixture", version = "0.0.0" }
test-utils = { path = "./crates/test-utils", version = "0.0.0" }
toolchain = { path = "./crates/toolchain", version = "0.0.0" }
tt = { path = "./crates/tt", version = "0.0.0" }
# vfs = { path = "./crates/vfs", version = "0.0.0" }
wgsl-parser = { path = "./crates/wgsl_parser", version = "0.0.0" }
wgsl-analyzer = { path = "./crates/wgsl-analyzer", version = "0.0.0" }
wgsl-formatter = { path = "./crates/wgsl_formatter", version = "0.0.0" }
wgslfmt = { path = "./crates/wgslfmt", version = "0.0.0" }

vfs-notify = { git = "https://github.com/rust-lang/rust-analyzer", rev = "7cce80c1738e8576ba715ec87dc8fcf28da0c5c6", version = "0.0.0" }
vfs = { git = "https://github.com/rust-lang/rust-analyzer", rev = "7cce80c1738e8576ba715ec87dc8fcf28da0c5c6", version = "0.0.0" }
text-edit = { git = "https://github.com/rust-lang/rust-analyzer", rev = "7cce80c1738e8576ba715ec87dc8fcf28da0c5c6", version = "0.0.0" }
paths = { git = "https://github.com/rust-lang/rust-analyzer", rev = "7cce80c1738e8576ba715ec87dc8fcf28da0c5c6", version = "0.0.0" }

ra-ap-rustc_lexer = { version = "0.96.0", default-features = false }
ra-ap-rustc_parse_format = { version = "0.96.0", default-features = false }
ra-ap-rustc_index = { version = "0.96.0", default-features = false }
ra-ap-rustc_abi = { version = "0.96.0", default-features = false }
ra-ap-rustc_pattern_analysis = { version = "0.96.0", default-features = false }

# local crates that are not published to crates.io. These should not have versions.

# in-tree crates that are published separately and follow semver. See lib/README.md
line-index = "0.1.2"
la-arena = "0.3.1"
lsp-server = "0.7.8"

# non-local crates
anyhow = "1.0.97"
arrayvec = "0.7.6"
base64 = "0.22"
bitflags = "2.9.0"
cargo_metadata = "0.19.1"
camino = "1.1.9"
dirs = "5.0.1"
scip = "0.5.2"
chalk-solve = { version = "0.99.0", default-features = false }
chalk-ir = "0.99.0"
chalk-recursive = { version = "0.99.0", default-features = false }
chalk-derive = "0.99.0"
crossbeam-channel = "0.5.14"
dissimilar = "1.0.9"
dot = "0.1.4"
either = "1.15.0"
expect-test = "1.5.1"
fxhash = "0.2.1"
hashbrown = { version = "0.15.2", features = [
  "inline-more",
], default-features = false }
indexmap = "2.8.0"
itertools = "0.14.0"
jod-thread = "0.1.2"
libc = "0.2.171"
libloading = "0.8.6"
memchr = "2.7.1"
logos = "0.12.0"
walkdir = "2.3.2"
toml = "0.8.8"
tenthash = "1.0.0"
num_cpus = "1.15.0"
memmap2 = "0.9.5"
nohash-hasher = "0.2.0"
oorandom = "11.1.5"
object = { version = "0.36.7", default-features = false, features = [
  "std",
  "read_core",
  "elf",
  "macho",
  "pe",
] }
parking_lot = "0.12.3"
xflags = "0.3.0"
threadpool = "1.8.1"
process-wrap = { version = "8.2.0", features = ["std"] }
pulldown-cmark-to-cmark = "21.0.0"
pulldown-cmark = { version = "0.13.0", default-features = false }
rayon = "1.10.0"
rowan = "0.16.1"
rustc-hash = "2.1.1"
salsa = "0.17.0-pre.2"
semver = "1.0.25"
serde = { version = "1.0.219" }
serde_derive = { version = "1.0.218" }
serde_json = "1.0.140"
smallvec = { version = "1.14.0", features = [
  "const_new",
  "union",
  "const_generics",
] }
smol_str = "0.3.2"
text-size = "1.1.1"
tracing = "0.1.40"
tracing-tree = "0.3.0"
tracing-subscriber = { version = "0.3.18", default-features = false, features = [
  "registry",
  "fmt",
  "local-time",
  "std",
  "time",
  "tracing-log",
  "env-filter",
] }
triomphe = { version = "0.1.14", default-features = false, features = ["std"] }
url = "2.5.4"
xshell = "0.2.7"
lexopt = "0.3.0"
prettydiff = "0.8.0"
notify = "8.0.0"

# We need to freeze the version of the crate, as the raw-api feature is considered unstable
dashmap = { version = "6.1.0", features = ["raw-api"] }

[workspace.lints.rust]
warnings = { level = "warn", priority = -2 }
deprecated-safe = { level = "deny", priority = -1 }
future-incompatible = { level = "deny", priority = -1 }
keyword-idents = { level = "deny", priority = -1 }
let-underscore = { level = "deny", priority = -1 }
nonstandard-style = { level = "deny", priority = -1 }
refining-impl-trait = { level = "deny", priority = -1 }
rust-2018-compatibility = { level = "deny", priority = -1 }
rust-2018-idioms = { level = "deny", priority = -1 }
rust-2021-compatibility = { level = "deny", priority = -1 }
rust-2024-compatibility = { level = "deny", priority = -1 }
# TODO still prototyping
unused = { level = "allow", priority = 1 }

[workspace.lints.clippy]
cargo = { level = "warn", priority = -2 }
complexity = { level = "warn", priority = -2 }
correctness = { level = "deny", priority = -1 }
nursery = { level = "warn", priority = -2 }
pedantic = { level = "warn", priority = -2 }
perf = { level = "warn", priority = -2 }
restriction = { level = "warn", priority = -2 }
style = { level = "warn", priority = -2 }
suspicious = { level = "warn", priority = -2 }

exhaustive_structs = "allow"               # wgsl-analyzer has no stability commitment
exhaustive_enums = "allow"                 # wgsl-analyzer has no stability commitment
single_call_fn = "allow"                   # good for organization
implicit_return = "allow"                  # unidiomatic
question_mark_used = "allow"               # unidiomatic
shadow_reuse = "allow"                     # often useful
pub_use = "allow"                          # often useful
std_instead_of_alloc = "allow"             # no no_std support
std_instead_of_core = "allow"              # no no_std support
cargo_common_metadata = "allow"            # not important
multiple_crate_versions = "allow"          # not under this crate's control
blanket_clippy_restriction_lints = "allow" # makes it easier to keep up to date with new lints
pub_with_shorthand = "allow"               # style preference
absolute_paths = "allow"                   # often hurts readability
items_after_statements = "allow"           # incorrect
shadow_unrelated = "allow"                 # do not care
missing_trait_methods = "allow"            # antipattern
float_arithmetic = "allow"                 # is fine
separated_literal_suffix = "allow"         # style preference
self_named_module_files = "allow"          # style preference
semicolon_outside_block = "allow"          # style preference
else_if_without_else = "allow"             # conflicting with redundant_else

# TODOs
missing_docs_in_private_items = "allow"
arbitrary_source_item_ordering = "allow"
field_scoped_visibility_modifiers = "allow"
module_name_repetitions = "allow"
struct_excessive_bools = "allow"
arithmetic_side_effects = "allow"
indexing_slicing = "allow"
unwrap_used = "allow"
unwrap_in_result = "allow"
undocumented_unsafe_blocks = "allow"
multiple_unsafe_ops_per_block = "allow"
pattern_type_mismatch = "allow"
panic_in_result_fn = "allow"
panic = "allow"
missing_errors_doc = "allow"
missing_assert_message = "allow"
unnecessary_wraps = "allow"
cast_precision_loss = "allow"
multiple_inherent_impl = "allow"
iter_over_hash_type = "allow"
expect_used = "allow"
string_slice = "allow"
cast_possible_truncation = "allow"
default_numeric_fallback = "allow"
redundant_pub_crate = "allow"
