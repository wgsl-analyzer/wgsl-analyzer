use parser::SyntaxNode;

use crate::FormattingOptions;

#[must_use]
pub fn format_str(
    input: &str,
    options: &FormattingOptions,
) -> String {
    let parse = parser::parse_file(input);
    let node = parse.syntax();
    format_tree(&node, options)
}

pub fn format_tree(
    syntax: &SyntaxNode,
    options: &FormattingOptions,
) -> String {
    todo!();
}

fn gen_node(node: &SyntaxNode) {
    match node.kind() {
        parser::SyntaxKind::SourceFile => todo!(),
        parser::SyntaxKind::Name => todo!(),
        parser::SyntaxKind::FunctionDeclaration => todo!(),
        parser::SyntaxKind::GenericArgumentList => todo!(),
        parser::SyntaxKind::FunctionParameters => todo!(),
        parser::SyntaxKind::Parameter => todo!(),
        parser::SyntaxKind::ReturnType => todo!(),
        parser::SyntaxKind::AssertStatement => todo!(),
        parser::SyntaxKind::CompoundStatement => todo!(),
        parser::SyntaxKind::AssignmentStatement => todo!(),
        parser::SyntaxKind::BreakStatement => todo!(),
        parser::SyntaxKind::BreakIfStatement => todo!(),
        parser::SyntaxKind::ContinueStatement => todo!(),
        parser::SyntaxKind::DiscardStatement => todo!(),
        parser::SyntaxKind::EmptyStatement => todo!(),
        parser::SyntaxKind::FunctionCallStatement => todo!(),
        parser::SyntaxKind::LoopStatement => todo!(),
        parser::SyntaxKind::WhileStatement => todo!(),
        parser::SyntaxKind::IfStatement => todo!(),
        parser::SyntaxKind::SwitchStatement => todo!(),
        parser::SyntaxKind::SwitchBody => todo!(),
        parser::SyntaxKind::SwitchBodyCase => todo!(),
        parser::SyntaxKind::SwitchCaseSelectors => todo!(),
        parser::SyntaxKind::SwitchCaseSelector => todo!(),
        parser::SyntaxKind::IncrementDecrementStatement => todo!(),
        parser::SyntaxKind::IfClause => todo!(),
        parser::SyntaxKind::ElseIfClause => todo!(),
        parser::SyntaxKind::ElseClause => todo!(),
        parser::SyntaxKind::ForStatement => todo!(),
        parser::SyntaxKind::ForInitializer => todo!(),
        parser::SyntaxKind::ForCondition => todo!(),
        parser::SyntaxKind::ForContinuingPart => todo!(),
        parser::SyntaxKind::FieldExpression => todo!(),
        parser::SyntaxKind::FunctionCall => todo!(),
        parser::SyntaxKind::Arguments => todo!(),
        parser::SyntaxKind::IdentExpression => todo!(),
        parser::SyntaxKind::NameReference => todo!(),
        parser::SyntaxKind::IndexExpression => todo!(),
        parser::SyntaxKind::ReturnStatement => todo!(),
        parser::SyntaxKind::InfixExpression => todo!(),
        parser::SyntaxKind::PrefixExpression => todo!(),
        parser::SyntaxKind::Literal => todo!(),
        parser::SyntaxKind::ParenthesisExpression => todo!(),
        parser::SyntaxKind::TypeSpecifier => todo!(),
        parser::SyntaxKind::CompoundAssignmentStatement => todo!(),
        parser::SyntaxKind::Attribute => todo!(),
        parser::SyntaxKind::StructDeclaration => todo!(),
        parser::SyntaxKind::StructBody => todo!(),
        parser::SyntaxKind::StructMember => todo!(),
        parser::SyntaxKind::ConstantDeclaration => todo!(),
        parser::SyntaxKind::VariableDeclaration => todo!(),
        parser::SyntaxKind::LetDeclaration => todo!(),
        parser::SyntaxKind::OverrideDeclaration => todo!(),
        parser::SyntaxKind::ContinuingStatement => todo!(),
        parser::SyntaxKind::TypeAliasDeclaration => todo!(),
        parser::SyntaxKind::Blankspace => todo!(),
        parser::SyntaxKind::LineEndingComment => todo!(),
        parser::SyntaxKind::BlockComment => todo!(),
        parser::SyntaxKind::Identifier => todo!(),
        parser::SyntaxKind::FloatLiteral => todo!(),
        parser::SyntaxKind::IntLiteral => todo!(),
        parser::SyntaxKind::StringLiteral => todo!(),
        parser::SyntaxKind::Alias => todo!(),
        parser::SyntaxKind::Break => todo!(),
        parser::SyntaxKind::Case => todo!(),
        parser::SyntaxKind::ConstantAssert => todo!(),
        parser::SyntaxKind::Continue => todo!(),
        parser::SyntaxKind::Continuing => todo!(),
        parser::SyntaxKind::Constant => todo!(),
        parser::SyntaxKind::Default => todo!(),
        parser::SyntaxKind::Discard => todo!(),
        parser::SyntaxKind::Else => todo!(),
        parser::SyntaxKind::Enable => todo!(),
        parser::SyntaxKind::False => todo!(),
        parser::SyntaxKind::Fn => todo!(),
        parser::SyntaxKind::For => todo!(),
        parser::SyntaxKind::If => todo!(),
        parser::SyntaxKind::Let => todo!(),
        parser::SyntaxKind::Loop => todo!(),
        parser::SyntaxKind::Override => todo!(),
        parser::SyntaxKind::Return => todo!(),
        parser::SyntaxKind::Struct => todo!(),
        parser::SyntaxKind::Switch => todo!(),
        parser::SyntaxKind::True => todo!(),
        parser::SyntaxKind::Var => todo!(),
        parser::SyntaxKind::While => todo!(),
        parser::SyntaxKind::And => todo!(),
        parser::SyntaxKind::AndAnd => todo!(),
        parser::SyntaxKind::Arrow => todo!(),
        parser::SyntaxKind::AttributeOperator => todo!(),
        parser::SyntaxKind::ForwardSlash => todo!(),
        parser::SyntaxKind::Bang => todo!(),
        parser::SyntaxKind::BracketLeft => todo!(),
        parser::SyntaxKind::BracketRight => todo!(),
        parser::SyntaxKind::BraceLeft => todo!(),
        parser::SyntaxKind::BraceRight => todo!(),
        parser::SyntaxKind::Colon => todo!(),
        parser::SyntaxKind::ColonColon => todo!(),
        parser::SyntaxKind::Comma => todo!(),
        parser::SyntaxKind::Equal => todo!(),
        parser::SyntaxKind::EqualEqual => todo!(),
        parser::SyntaxKind::NotEqual => todo!(),
        parser::SyntaxKind::GreaterThan => todo!(),
        parser::SyntaxKind::GreaterThanEqual => todo!(),
        parser::SyntaxKind::LessThan => todo!(),
        parser::SyntaxKind::LessThanEqual => todo!(),
        parser::SyntaxKind::Modulo => todo!(),
        parser::SyntaxKind::Minus => todo!(),
        parser::SyntaxKind::MinusMinus => todo!(),
        parser::SyntaxKind::Period => todo!(),
        parser::SyntaxKind::Plus => todo!(),
        parser::SyntaxKind::PlusPlus => todo!(),
        parser::SyntaxKind::Or => todo!(),
        parser::SyntaxKind::OrOr => todo!(),
        parser::SyntaxKind::ParenthesisLeft => todo!(),
        parser::SyntaxKind::ParenthesisRight => todo!(),
        parser::SyntaxKind::Semicolon => todo!(),
        parser::SyntaxKind::Star => todo!(),
        parser::SyntaxKind::Tilde => todo!(),
        parser::SyntaxKind::Underscore => todo!(),
        parser::SyntaxKind::Xor => todo!(),
        parser::SyntaxKind::PlusEqual => todo!(),
        parser::SyntaxKind::MinusEqual => todo!(),
        parser::SyntaxKind::TimesEqual => todo!(),
        parser::SyntaxKind::DivisionEqual => todo!(),
        parser::SyntaxKind::ModuloEqual => todo!(),
        parser::SyntaxKind::AndEqual => todo!(),
        parser::SyntaxKind::OrEqual => todo!(),
        parser::SyntaxKind::XorEqual => todo!(),
        parser::SyntaxKind::ShiftRightEqual => todo!(),
        parser::SyntaxKind::ShiftLeftEqual => todo!(),
        parser::SyntaxKind::ShiftLeft => todo!(),
        parser::SyntaxKind::ShiftRight => todo!(),
        parser::SyntaxKind::TemplateStart => todo!(),
        parser::SyntaxKind::TemplateEnd => todo!(),
        parser::SyntaxKind::Error => todo!(),
        parser::SyntaxKind::Diagnostic => todo!(),
        parser::SyntaxKind::Requires => todo!(),
    }
}
