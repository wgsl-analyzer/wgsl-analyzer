{
	"name": "wgsl-analyzer",
	"description": "WGSL/WESL support for Visual Studio Code",
	"displayName": "wgsl-analyzer",
	"private": true,
	"icon": "icon.png",
	"version": "0.11.0-dev",
	"releaseTag": null,
	"publisher": "wgsl-analyzer",
	"type": "commonjs",
	"repository": {
		"type": "git",
		"url": "https://github.com/wgsl-analyzer/wgsl-analyzer"
	},
	"homepage": "https://wgsl-analyzer.github.io/",
	"license": "MIT OR Apache-2.0",
	"keywords": [
		"shading",
		"web",
		"wesl",
		"wgsl"
	],
	"categories": [
		"Formatters",
		"Programming Languages",
		"Linters"
	],
	"capabilities": {
		"untrustedWorkspaces": {
			"supported": false,
			"description": "wgsl-analyzer invokes binaries set up by its configuration. A malicious actor could exploit this to run arbitrary code on your machine."
		}
	},
	"engines": {
		"vscode": "^1.101.0"
	},
	"enabledApiProposals": [],
	"scripts": {
		"vscode:prepublish": "npm run build-base -- --minify",
		"package": "vsce package -o wgsl-analyzer.vsix",
		"build-base": "esbuild ./src/main.ts --bundle --outfile=out/main.js --external:vscode --format=cjs --platform=node --target=node22",
		"build": "npm run build-base -- --sourcemap",
		"watch": "npm run build-base -- --sourcemap --watch",
		"format": "node --experimental-strip-types node_modules/prettier/bin/prettier.cjs . --write",
		"format:check": "node --experimental-strip-types node_modules/prettier/bin/prettier.cjs . --check",
		"lint": "eslint .",
		"lint:fix": "npm run lint -- --fix",
		"typecheck": "tsc",
		"pretest": "npm run typecheck && npm run build",
		"test": "node ./out/tests/runTests.js"
	},
	"dependencies": {
		"@hpcc-js/wasm": "^2.24.3",
		"anser": "^2.3.2",
		"d3": "^7.9.0",
		"d3-graphviz": "^5.6.0",
		"jiti": "^2.4.2",
		"vscode-languageclient": "^9.0.1"
	},
	"devDependencies": {
		"@eslint/js": "^9.21.0",
		"@stylistic/eslint-plugin": "^5.1.0",
		"@stylistic/eslint-plugin-js": "^4.4.1",
		"@tsconfig/strictest": "^2.0.5",
		"@types/node": "~24.0.10",
		"@types/vscode": "~1.101.0",
		"@typescript-eslint/eslint-plugin": "^8.24.1",
		"@typescript-eslint/parser": "^8.36.0",
		"@vscode/test-electron": "^2.4.1",
		"@vscode/vsce": "^3.6.0",
		"esbuild": "^0.25.6",
		"eslint": "^9.30.1",
		"eslint-config-prettier": "^10.1.5",
		"eslint-define-config": "^2.1.0",
		"ovsx": "0.10.5",
		"prettier": "^3.6.2",
		"tslib": "^2.8.1",
		"typescript": "^5.7.3",
		"typescript-eslint": "^8.36.0"
	},
	"main": "./out/main.js",
	"activationEvents": [
		"workspaceContains:*/*.wgsl",
		"workspaceContains:*/*.wesl",
		"workspaceContains:wesl.toml",
		"workspaceContains:*/wesl.toml"
	],
	"contributes": {
		"commands": [
			{
				"command": "wgsl-analyzer.syntaxTree",
				"title": "Show Syntax Tree",
				"category": "wgsl-analyzer"
			},
			{
				"command": "wgsl-analyzer.debugCommand",
				"title": "Debug command",
				"category": "wgsl-analyzer"
			},
			{
				"command": "wgsl-analyzer.fullSource",
				"title": "Show full source",
				"category": "wgsl-analyzer"
			},
			{
				"command": "wgsl-analyzer.viewFileText",
				"title": "View File Text (as seen by the server)",
				"category": "wgsl-analyzer (debug command)"
			},
			{
				"command": "wgsl-analyzer.viewItemTree",
				"title": "Debug ItemTree",
				"category": "wgsl-analyzer (debug command)"
			},
			{
				"command": "wgsl-analyzer.memoryUsage",
				"title": "Memory Usage (Clears Database)",
				"category": "wgsl-analyzer (debug command)"
			},
			{
				"command": "wgsl-analyzer.matchingBrace",
				"title": "Find matching brace",
				"category": "wgsl-analyzer"
			},
			{
				"command": "wgsl-analyzer.joinLines",
				"title": "Join lines",
				"category": "wgsl-analyzer"
			},
			{
				"command": "wgsl-analyzer.analyzerStatus",
				"title": "Status",
				"category": "wgsl-analyzer"
			},
			{
				"command": "wgsl-analyzer.reloadWorkspace",
				"title": "Reload workspace",
				"category": "wgsl-analyzer"
			},
			{
				"command": "wgsl-analyzer.restartServer",
				"title": "Restart server",
				"category": "wgsl-analyzer"
			},
			{
				"command": "wgsl-analyzer.startServer",
				"title": "Start server",
				"category": "wgsl-analyzer"
			},
			{
				"command": "wgsl-analyzer.stopServer",
				"title": "Stop server",
				"category": "wgsl-analyzer"
			},
			{
				"command": "wgsl-analyzer.onEnter",
				"title": "Enhanced enter key",
				"category": "wgsl-analyzer"
			},
			{
				"command": "wgsl-analyzer.ssr",
				"title": "Structural Search Replace",
				"category": "wgsl-analyzer"
			},
			{
				"command": "wgsl-analyzer.serverVersion",
				"title": "Show RA Version",
				"category": "wgsl-analyzer"
			},
			{
				"command": "wgsl-analyzer.openDocs",
				"title": "Open Docs",
				"category": "wgsl-analyzer"
			},
			{
				"command": "wgsl-analyzer.openExternalDocs",
				"title": "Open External Docs",
				"category": "wgsl-analyzer"
			},
			{
				"command": "wgsl-analyzer.moveItemUp",
				"title": "Move Item Up",
				"category": "wgsl-analyzer"
			},
			{
				"command": "wgsl-analyzer.moveItemDown",
				"title": "Move Item Down",
				"category": "wgsl-analyzer"
			},
			{
				"command": "wgsl-analyzer.cancelFlycheck",
				"title": "Cancel running flychecks",
				"category": "wgsl-analyzer"
			},
			{
				"command": "wgsl-analyzer.runFlycheck",
				"title": "Run flycheck",
				"category": "wgsl-analyzer"
			},
			{
				"command": "wgsl-analyzer.clearFlycheck",
				"title": "Clear flycheck diagnostics",
				"category": "wgsl-analyzer"
			},
			{
				"command": "wgsl-analyzer.revealImport",
				"title": "Reveal File",
				"category": "wgsl-analyzer"
			},
			{
				"command": "wgsl-analyzer.syntaxTreeReveal",
				"title": "Reveal Syntax Element",
				"icon": "$(search)",
				"category": "wgsl-analyzer (syntax tree)"
			},
			{
				"command": "wgsl-analyzer.syntaxTreeCopy",
				"title": "Copy",
				"icon": "$(copy)",
				"category": "wgsl-analyzer (syntax tree)"
			},
			{
				"command": "wgsl-analyzer.syntaxTreeHideWhitespace",
				"title": "Hide Whitespace",
				"icon": "$(filter)",
				"category": "wgsl-analyzer (syntax tree)"
			},
			{
				"command": "wgsl-analyzer.syntaxTreeShowWhitespace",
				"title": "Show Whitespace",
				"icon": "$(filter-filled)",
				"category": "wgsl-analyzer (syntax tree)"
			},
			{
				"command": "wgsl-analyzer.viewMemoryLayout",
				"title": "View Memory Layout",
				"category": "wgsl-analyzer"
			},
			{
				"command": "wgsl-analyzer.toggleCheckOnSave",
				"title": "Toggle Check on Save",
				"category": "wgsl-analyzer"
			},
			{
				"command": "wgsl-analyzer.toggleLSPLogs",
				"title": "Toggle LSP Logs",
				"category": "wgsl-analyzer"
			},
			{
				"command": "wgsl-analyzer.openWalkthrough",
				"title": "Open Walkthrough",
				"category": "wgsl-analyzer"
			}
		],
		"keybindings": [
			{
				"command": "wgsl-analyzer.joinLines",
				"key": "ctrl+shift+j",
				"when": "editorTextFocus && (editorLangId == wgsl || editorLangId == wesl)"
			}
		],
		"configuration": [
			{
				"title": "wgsl-analyzer",
				"properties": {
					"wgsl-analyzer.diagnostics.typeErrors": {
						"type": "boolean",
						"default": true,
						"description": "Controls whether to show type errors."
					},
					"wgsl-analyzer.diagnostics.nagaParsingErrors": {
						"type": "boolean",
						"default": false,
						"description": "Controls whether to show naga's parsing errors."
					},
					"wgsl-analyzer.diagnostics.nagaValidationErrors": {
						"type": "boolean",
						"default": true,
						"description": "Controls whether to show naga's validation errors."
					},
					"wgsl-analyzer.diagnostics.nagaVersion": {
						"type": "string",
						"enum": [
							"0.14",
							"0.19",
							"0.22",
							"main"
						],
						"default": "0.22",
						"description": "Which version of naga to use for its diagnostics"
					},
					"wgsl-analyzer.customImports": {
						"type": "object",
						"additionalProperties": {
							"type": "string"
						},
						"default": {},
						"markdownDescription": "`#import` directives in the flavor of [Bevy Engine](https://bevyengine.org)'s [shader preprocessor](https://bevyengine.org/news/bevy-0-6/#shader-imports). To use objects from an import, add `#import <name>` to your WGSL."
					},
					"wgsl-analyzer.preprocessor.shaderDefs": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"default": [],
						"markdownDescription": "Shader defines used in `#ifdef` directives in the flavor of [Bevy Engine](https://bevyengine.org)'s [shader preprocessor](https://bevyengine.org/news/bevy-0-6/#shader-imports)."
					},
					"wgsl-analyzer.inlayHints.enabled": {
						"type": "boolean",
						"default": true,
						"description": "Whether to show inlay hints"
					},
					"wgsl-analyzer.inlayHints.typeHints": {
						"type": "boolean",
						"default": true,
						"description": "Whether to show inlay hints for types of variable declarations"
					},
					"wgsl-analyzer.inlayHints.parameterHints": {
						"type": "boolean",
						"default": true,
						"description": "Whether to show inlay hints for the names of function parameters"
					},
					"wgsl-analyzer.inlayHints.structLayoutHints": {
						"type": "boolean",
						"default": false,
						"description": "Whether to show inlay hints for the layout of struct fields"
					},
					"wgsl-analyzer.inlayHints.typeVerbosity": {
						"type": "string",
						"enum": [
							"full",
							"compact",
							"inner"
						],
						"enumDescriptions": [
							"e.g. ref<uniform, f32, read_write>",
							"e.g. ref<f32>",
							"e.g. f32"
						],
						"default": "compact"
					}
				}
			},
			{
				"title": "general",
				"properties": {
					"wgsl-analyzer.restartServerOnConfigChange": {
						"markdownDescription": "Whether to restart the server automatically when certain settings that require a restart are changed.",
						"default": false,
						"type": "boolean"
					},
					"wgsl-analyzer.showUnlinkedFileNotification": {
						"markdownDescription": "Whether to show a notification for unlinked files asking the user to add the corresponding Cargo.toml to the linked projects setting.",
						"default": true,
						"type": "boolean"
					},
					"wgsl-analyzer.showRequestFailedErrorNotification": {
						"markdownDescription": "Whether to show error notifications for failing requests.",
						"default": true,
						"type": "boolean"
					},
					"wgsl-analyzer.showDependenciesExplorer": {
						"markdownDescription": "Whether to show the dependencies view.",
						"default": true,
						"type": "boolean"
					},
					"wgsl-analyzer.showSyntaxTree": {
						"markdownDescription": "Whether to show the syntax tree view.",
						"default": false,
						"type": "boolean"
					},
					"wgsl-analyzer.initializeStopped": {
						"markdownDescription": "Do not start wgsl-analyzer server when the extension is activated.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "statusBar",
				"properties": {
					"wgsl-analyzer.statusBar.clickAction": {
						"type": "string",
						"enum": [
							"stopServer",
							"openLogs"
						],
						"enumDescriptions": [
							"Stop Server",
							"Open Logs"
						],
						"default": "openLogs",
						"markdownDescription": "Action to run when clicking the extension status bar item."
					},
					"wgsl-analyzer.statusBar.showStatusBar": {
						"markdownDescription": "When to show the extension status bar.\n\n`\"always\"` Always show the status bar.\n\n`\"never\"` Never show the status bar.\n\n`{ documentSelector: <DocumentSelector>[] }` Show the status bar if the open file matches any of the given document selectors.\n\nSee [VS Code -- DocumentSelector](https://code.visualstudio.com/api/references/document-selector) for more information.",
						"anyOf": [
							{
								"type": "string",
								"enum": [
									"always",
									"never"
								]
							},
							{
								"type": "object",
								"properties": {
									"documentSelector": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"language": {
													"type": "string"
												},
												"notebookType": {
													"type": "string"
												},
												"scheme": {
													"type": "string"
												},
												"pattern": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						],
						"default": {
							"documentSelector": [
								{
									"language": "wgsl"
								},
								{
									"language": "wesl"
								},
								{
									"pattern": "**/wesl.toml"
								},
								{
									"scheme": "output",
									"pattern": "extension-output-wgsl-analyzer.wgsl-analyzer*"
								}
							]
						}
					}
				}
			},
			{
				"title": "server",
				"properties": {
					"wgsl-analyzer.server.path": {
						"type": [
							"null",
							"string"
						],
						"scope": "machine-overridable",
						"default": null,
						"markdownDescription": "Path to wgsl-analyzer executable (points to bundled binary by default)."
					},
					"wgsl-analyzer.server.extraEnv": {
						"type": [
							"null",
							"object"
						],
						"additionalProperties": {
							"type": [
								"string",
								"number"
							]
						},
						"default": null,
						"markdownDescription": "Extra environment variables that will be passed to the wgsl-analyzer executable. Useful for passing e.g. `WA_LOG` for debugging."
					}
				}
			},
			{
				"title": "trace",
				"properties": {
					"wgsl-analyzer.trace.server": {
						"type": "string",
						"scope": "window",
						"enum": [
							"off",
							"messages",
							"verbose"
						],
						"enumDescriptions": [
							"No traces",
							"Error only",
							"Full log"
						],
						"default": "off",
						"description": "Trace requests to the wgsl-analyzer (this is usually overly verbose and not recommended for regular users)."
					},
					"wgsl-analyzer.trace.extension": {
						"description": "Enable logging of VS Code extensions itself.",
						"markdownDeprecationMessage": "Log level is now controlled by the [Developer: Set Log Level...](command:workbench.action.setLogLevel) command. You can set the log level for the current session and also the default log level from there. This is also available by clicking the gear icon on the OUTPUT tab when wgsl-analyzer Client is visible or by passing the --log wgsl-analyzer.wgsl-analyzer:debug parameter to VS Code.",
						"type": "boolean",
						"default": false
					}
				}
			},
			{
				"title": "typing",
				"properties": {
					"wgsl-analyzer.typing.continueCommentsOnNewline": {
						"markdownDescription": "Whether to prefix newlines after comments with the corresponding comment prefix.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "diagnostics",
				"properties": {
					"wgsl-analyzer.diagnostics.previewNagaOutput": {
						"markdownDescription": "Whether to show the main part of the rendered Naga output of a diagnostic message.",
						"default": false,
						"type": "boolean"
					},
					"wgsl-analyzer.diagnostics.useNagaErrorCode": {
						"markdownDescription": "Whether to show diagnostics using the original Naga error code. If this is false, all Naga diagnostics will have the code 'Naga(Click for full compiler diagnostics)'",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "$generated-start"
			},
			{
				"title": "assist",
				"properties": {
					"wgsl-analyzer.assist.expressionFillDefault": {
						"markdownDescription": "Placeholder expression to use for missing expressions in assists.",
						"default": "todo",
						"type": "string",
						"enum": [
							"todo",
							"default"
						],
						"enumDescriptions": [
							"Fill missing expressions with a `todo` comment.",
							"Fill missing expressions with reasonable defaults."
						]
					}
				}
			},
			{
				"title": "assist",
				"properties": {
					"wgsl-analyzer.assist.termSearch.fuel": {
						"markdownDescription": "Term search fuel in \"units of work\" for assists (Defaults to 1800).",
						"default": 1800,
						"type": "integer",
						"minimum": 0
					}
				}
			},
			{
				"title": "cachePriming",
				"properties": {
					"wgsl-analyzer.cachePriming.enable": {
						"markdownDescription": "Warm up caches on project load.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "cachePriming",
				"properties": {
					"wgsl-analyzer.cachePriming.numThreads": {
						"markdownDescription": "How many worker threads to handle priming caches. The default `0` means to pick automatically.",
						"default": "physical",
						"anyOf": [
							{
								"type": "number",
								"minimum": 0,
								"maximum": 255
							},
							{
								"type": "string",
								"enum": [
									"physical",
									"logical"
								],
								"enumDescriptions": [
									"Use the number of physical cores",
									"Use the number of logical cores"
								]
							}
						]
					}
				}
			},
			{
				"title": "completion",
				"properties": {
					"wgsl-analyzer.completion.addSemicolonToUnit": {
						"markdownDescription": "Whether to automatically add a semicolon when completing unit-returning functions.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "completion",
				"properties": {
					"wgsl-analyzer.completion.callable.snippets": {
						"markdownDescription": "Whether to add parenthesis and argument snippets when completing function.",
						"default": "fill_arguments",
						"type": "string",
						"enum": [
							"fill_arguments",
							"add_parentheses",
							"none"
						],
						"enumDescriptions": [
							"Add call parentheses and pre-fill arguments.",
							"Add call parentheses.",
							"Do no snippet completions for callables."
						]
					}
				}
			},
			{
				"title": "completion",
				"properties": {
					"wgsl-analyzer.completion.fullFunctionSignatures.enable": {
						"markdownDescription": "Whether to show full function/method signatures in completion docs.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "completion",
				"properties": {
					"wgsl-analyzer.completion.limit": {
						"markdownDescription": "Maximum number of completions to return. If `null`, then there is no limit.",
						"default": null,
						"type": [
							"null",
							"integer"
						],
						"minimum": 0
					}
				}
			},
			{
				"title": "completion",
				"properties": {
					"wgsl-analyzer.completion.postfix.enable": {
						"markdownDescription": "Whether to show postfix snippets like `if` and `not`.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "completion",
				"properties": {
					"wgsl-analyzer.completion.snippets.custom": {
						"markdownDescription": "Custom completion snippets.",
						"default": {},
						"type": "object"
					}
				}
			},
			{
				"title": "completion",
				"properties": {
					"wgsl-analyzer.completion.termSearch.enable": {
						"markdownDescription": "Whether to enable term search based snippets.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "completion",
				"properties": {
					"wgsl-analyzer.completion.termSearch.fuel": {
						"markdownDescription": "Term search fuel in \"units of work\" for autocompletion (Defaults to 1000).",
						"default": 1000,
						"type": "integer",
						"minimum": 0
					}
				}
			},
			{
				"title": "diagnostics",
				"properties": {
					"wgsl-analyzer.diagnostics.disabled": {
						"markdownDescription": "List of wgsl-analyzer diagnostics to disable.",
						"default": [],
						"type": "array",
						"items": {
							"type": "string"
						},
						"uniqueItems": true
					}
				}
			},
			{
				"title": "diagnostics",
				"properties": {
					"wgsl-analyzer.diagnostics.enable": {
						"markdownDescription": "Whether to show native wgsl-analyzer diagnostics.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "diagnostics",
				"properties": {
					"wgsl-analyzer.diagnostics.experimental.enable": {
						"markdownDescription": "Whether to show experimental wgsl-analyzer diagnostics that might have more false positives than usual.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "diagnostics",
				"properties": {
					"wgsl-analyzer.diagnostics.styleLints.enable": {
						"markdownDescription": "Whether to run additional style lints.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "diagnostics",
				"properties": {
					"wgsl-analyzer.diagnostics.warningsAsHint": {
						"markdownDescription": "List of warnings that should be displayed with hint severity.\n\nThe warnings will be indicated by faded text or three dots in code and will not show up in the `Problems Panel`.",
						"default": [],
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			},
			{
				"title": "diagnostics",
				"properties": {
					"wgsl-analyzer.diagnostics.warningsAsInfo": {
						"markdownDescription": "List of warnings that should be displayed with info severity.\n\nThe warnings will be indicated by a blue squiggly underline in code and a blue icon in the `Problems Panel`.",
						"default": [],
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			},
			{
				"title": "files",
				"properties": {
					"wgsl-analyzer.files.exclude": {
						"markdownDescription": "These paths (file/directories) will be ignored by wgsl-analyzer. They are relative to the workspace root, and globs are not supported. You may also need to add the folders to Code's `files.watcherExclude`.",
						"default": [],
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			},
			{
				"title": "files",
				"properties": {
					"wgsl-analyzer.files.watcher": {
						"markdownDescription": "Controls file watching implementation.",
						"default": "client",
						"type": "string",
						"enum": [
							"client",
							"server"
						],
						"enumDescriptions": [
							"Use the client (editor) to watch files for changes",
							"Use server-side file watching"
						]
					}
				}
			},
			{
				"title": "highlightRelated",
				"properties": {
					"wgsl-analyzer.highlightRelated.breakPoints.enable": {
						"markdownDescription": "Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "highlightRelated",
				"properties": {
					"wgsl-analyzer.highlightRelated.exitPoints.enable": {
						"markdownDescription": "Enables highlighting of all exit points while the cursor is on any `return`, `fn`, or return type arrow (`->`).",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "highlightRelated",
				"properties": {
					"wgsl-analyzer.highlightRelated.references.enable": {
						"markdownDescription": "Enables highlighting of related references while the cursor is on any identifier.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "hover",
				"properties": {
					"wgsl-analyzer.hover.actions.enable": {
						"markdownDescription": "Whether to show hover actions.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "hover",
				"properties": {
					"wgsl-analyzer.hover.actions.gotoTypeDef.enable": {
						"markdownDescription": "Whether to show `Go to Type Definition` action. Only applies when `#wgsl-analyzer.hover.actions.enable#` is set.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "hover",
				"properties": {
					"wgsl-analyzer.hover.actions.implementations.enable": {
						"markdownDescription": "Whether to show `Implementations` action. Only applies when `#wgsl-analyzer.hover.actions.enable#` is set.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "hover",
				"properties": {
					"wgsl-analyzer.hover.actions.references.enable": {
						"markdownDescription": "Whether to show `References` action. Only applies when `#wgsl-analyzer.hover.actions.enable#` is set.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "hover",
				"properties": {
					"wgsl-analyzer.hover.documentation.enable": {
						"markdownDescription": "Whether to show documentation on hover.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "hover",
				"properties": {
					"wgsl-analyzer.hover.documentation.keywords.enable": {
						"markdownDescription": "Whether to show keyword hover popups. Only applies when `#wgsl-analyzer.hover.documentation.enable#` is set.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "hover",
				"properties": {
					"wgsl-analyzer.hover.links.enable": {
						"markdownDescription": "Use markdown syntax for links on hover.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "hover",
				"properties": {
					"wgsl-analyzer.hover.memoryLayout.alignment": {
						"markdownDescription": "How to render the align information in a memory layout hover.",
						"default": "hexadecimal",
						"anyOf": [
							{
								"type": "null"
							},
							{
								"type": "string",
								"enum": [
									"both",
									"decimal",
									"hexadecimal"
								],
								"enumDescriptions": [
									"Render as 12 (0xC)",
									"Render as 12",
									"Render as 0xC"
								]
							}
						]
					}
				}
			},
			{
				"title": "hover",
				"properties": {
					"wgsl-analyzer.hover.memoryLayout.enable": {
						"markdownDescription": "Whether to show memory layout data on hover.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "hover",
				"properties": {
					"wgsl-analyzer.hover.memoryLayout.niches": {
						"markdownDescription": "How to render the niche information in a memory layout hover.",
						"default": false,
						"type": [
							"null",
							"boolean"
						]
					}
				}
			},
			{
				"title": "hover",
				"properties": {
					"wgsl-analyzer.hover.memoryLayout.offset": {
						"markdownDescription": "How to render the offset information in a memory layout hover.",
						"default": "hexadecimal",
						"anyOf": [
							{
								"type": "null"
							},
							{
								"type": "string",
								"enum": [
									"both",
									"decimal",
									"hexadecimal"
								],
								"enumDescriptions": [
									"Render as 12 (0xC)",
									"Render as 12",
									"Render as 0xC"
								]
							}
						]
					}
				}
			},
			{
				"title": "hover",
				"properties": {
					"wgsl-analyzer.hover.memoryLayout.size": {
						"markdownDescription": "How to render the size information in a memory layout hover.",
						"default": "both",
						"anyOf": [
							{
								"type": "null"
							},
							{
								"type": "string",
								"enum": [
									"both",
									"decimal",
									"hexadecimal"
								],
								"enumDescriptions": [
									"Render as 12 (0xC)",
									"Render as 12",
									"Render as 0xC"
								]
							}
						]
					}
				}
			},
			{
				"title": "hover",
				"properties": {
					"wgsl-analyzer.hover.show.fields": {
						"markdownDescription": "How many fields of a struct, variant or union to display when hovering on. Show none if empty.",
						"default": 5,
						"type": [
							"null",
							"integer"
						],
						"minimum": 0
					}
				}
			},
			{
				"title": "hover",
				"properties": {
					"wgsl-analyzer.hover.show.traitAssocItems": {
						"markdownDescription": "How many associated items of a trait to display when hovering a trait.",
						"default": null,
						"type": [
							"null",
							"integer"
						],
						"minimum": 0
					}
				}
			},
			{
				"title": "imports",
				"properties": {
					"wgsl-analyzer.imports.granularity.enforce": {
						"markdownDescription": "Whether to enforce the import granularity setting for all files. If set to false wgsl-analyzer will try to keep import styles consistent per file.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "imports",
				"properties": {
					"wgsl-analyzer.imports.granularity.group": {
						"markdownDescription": "How imports should be grouped into use statements.",
						"default": "crate",
						"type": "string",
						"enum": [
							"preserve",
							"crate",
							"module",
							"item",
							"one"
						],
						"enumDescriptions": [
							"Do not change the granularity of any imports and preserve the original structure written by the developer.",
							"Merge imports from the same crate into a single use statement. Conversely, imports from different crates are split into separate statements.",
							"Merge imports from the same module into a single use statement. Conversely, imports from different modules are split into separate statements.",
							"Flatten imports so that each has its own use statement.",
							"Merge all imports into a single use statement as long as they have the same visibility and attributes."
						]
					}
				}
			},
			{
				"title": "imports",
				"properties": {
					"wgsl-analyzer.imports.group.enable": {
						"markdownDescription": "Group inserted imports by the [following order](https://wgsl-analyzer.github.io/manual.html#auto-import). Groups are separated by newlines.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "imports",
				"properties": {
					"wgsl-analyzer.imports.merge.glob": {
						"markdownDescription": "Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "imports",
				"properties": {
					"wgsl-analyzer.imports.preferNoStd": {
						"markdownDescription": "Prefer to unconditionally use imports of the core and alloc crate, over the std crate.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "imports",
				"properties": {
					"wgsl-analyzer.imports.preferPrelude": {
						"markdownDescription": "Whether to prefer import paths containing a `prelude` module.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "imports",
				"properties": {
					"wgsl-analyzer.imports.prefix": {
						"markdownDescription": "The path structure for newly inserted paths to use.",
						"default": "plain",
						"type": "string",
						"enum": [
							"plain",
							"self",
							"crate"
						],
						"enumDescriptions": [
							"Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item.",
							"Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item. Prefixes `self` in front of the path if it starts with a module.",
							"Force import paths to be absolute by always starting them with `crate` or the extern crate name they come from."
						]
					}
				}
			},
			{
				"title": "imports",
				"properties": {
					"wgsl-analyzer.imports.prefixExternPrelude": {
						"markdownDescription": "Whether to prefix external (including std, core) crate imports with `::`. e.g. \"use ::std::io::Read;\".",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "inlayHints",
				"properties": {
					"wgsl-analyzer.inlayHints.bindingModeHints.enable": {
						"markdownDescription": "Whether to show inlay type hints for binding modes.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "inlayHints",
				"properties": {
					"wgsl-analyzer.inlayHints.chainingHints.enable": {
						"markdownDescription": "Whether to show inlay type hints for method chains.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "inlayHints",
				"properties": {
					"wgsl-analyzer.inlayHints.closingBraceHints.enable": {
						"markdownDescription": "Whether to show inlay hints after a closing `}` to indicate what item it belongs to.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "inlayHints",
				"properties": {
					"wgsl-analyzer.inlayHints.closingBraceHints.minLines": {
						"markdownDescription": "Minimum number of lines required before the `}` until the hint is shown (set to 0 or 1 to always show them).",
						"default": 25,
						"type": "integer",
						"minimum": 0
					}
				}
			},
			{
				"title": "inlayHints",
				"properties": {
					"wgsl-analyzer.inlayHints.expressionAdjustmentHints.enable": {
						"markdownDescription": "Whether to show inlay hints for type adjustments.",
						"default": "never",
						"type": "string",
						"enum": [
							"always",
							"never",
							"reborrow"
						],
						"enumDescriptions": [
							"Always show all adjustment hints.",
							"Never show adjustment hints.",
							"Only show auto borrow and dereference adjustment hints."
						]
					}
				}
			},
			{
				"title": "inlayHints",
				"properties": {
					"wgsl-analyzer.inlayHints.expressionAdjustmentHints.hideOutsideUnsafe": {
						"markdownDescription": "Whether to hide inlay hints for type adjustments outside of `unsafe` blocks.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "inlayHints",
				"properties": {
					"wgsl-analyzer.inlayHints.expressionAdjustmentHints.mode": {
						"markdownDescription": "Whether to show inlay hints as postfix ops (`.*` instead of `*`, etc).",
						"default": "prefix",
						"type": "string",
						"enum": [
							"prefix",
							"postfix",
							"prefer_prefix",
							"prefer_postfix"
						],
						"enumDescriptions": [
							"Always show adjustment hints as prefix (`*expr`).",
							"Always show adjustment hints as postfix (`expr.*`).",
							"Show prefix or postfix depending on which uses less parenthesis, preferring prefix.",
							"Show prefix or postfix depending on which uses less parenthesis, preferring postfix."
						]
					}
				}
			},
			{
				"title": "inlayHints",
				"properties": {
					"wgsl-analyzer.inlayHints.genericParameterHints.const.enable": {
						"markdownDescription": "Whether to show const generic parameter name inlay hints.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "inlayHints",
				"properties": {
					"wgsl-analyzer.inlayHints.genericParameterHints.lifetime.enable": {
						"markdownDescription": "Whether to show generic lifetime parameter name inlay hints.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "inlayHints",
				"properties": {
					"wgsl-analyzer.inlayHints.genericParameterHints.type.enable": {
						"markdownDescription": "Whether to show generic type parameter name inlay hints.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "inlayHints",
				"properties": {
					"wgsl-analyzer.inlayHints.implicitDrops.enable": {
						"markdownDescription": "Whether to show implicit drop hints.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "inlayHints",
				"properties": {
					"wgsl-analyzer.inlayHints.implicitSizedBoundHints.enable": {
						"markdownDescription": "Whether to show inlay hints for the implied type parameter `Sized` bound.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "inlayHints",
				"properties": {
					"wgsl-analyzer.inlayHints.lifetimeElisionHints.enable": {
						"markdownDescription": "Whether to show inlay type hints for elided lifetimes in function signatures.",
						"default": "never",
						"type": "string",
						"enum": [
							"always",
							"never",
							"skip_trivial"
						],
						"enumDescriptions": [
							"Always show lifetime elision hints.",
							"Never show lifetime elision hints.",
							"Only show lifetime elision hints if a return type is involved."
						]
					}
				}
			},
			{
				"title": "inlayHints",
				"properties": {
					"wgsl-analyzer.inlayHints.lifetimeElisionHints.useParameterNames": {
						"markdownDescription": "Whether to prefer using parameter names as the name for elided lifetime hints if possible.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "inlayHints",
				"properties": {
					"wgsl-analyzer.inlayHints.maxLength": {
						"markdownDescription": "Maximum length for inlay hints. Set to null to have an unlimited length.",
						"default": 25,
						"type": [
							"null",
							"integer"
						],
						"minimum": 0
					}
				}
			},
			{
				"title": "inlayHints",
				"properties": {
					"wgsl-analyzer.inlayHints.parameterHints.enable": {
						"markdownDescription": "Whether to show function parameter name inlay hints at the call site.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "inlayHints",
				"properties": {
					"wgsl-analyzer.inlayHints.rangeExclusiveHints.enable": {
						"markdownDescription": "Whether to show exclusive range inlay hints.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "inlayHints",
				"properties": {
					"wgsl-analyzer.inlayHints.reborrowHints.enable": {
						"markdownDescription": "Whether to show inlay hints for compiler inserted reborrows.\nThis setting is deprecated in favor of #wgsl-analyzer.inlayHints.expressionAdjustmentHints.enable#.",
						"default": "never",
						"type": "string",
						"enum": [
							"always",
							"never",
							"mutable"
						],
						"enumDescriptions": [
							"Always show reborrow hints.",
							"Never show reborrow hints.",
							"Only show mutable reborrow hints."
						]
					}
				}
			},
			{
				"title": "inlayHints",
				"properties": {
					"wgsl-analyzer.inlayHints.renderColons": {
						"markdownDescription": "Whether to render leading colons for type hints, and trailing colons for parameter hints.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "inlayHints",
				"properties": {
					"wgsl-analyzer.inlayHints.typeHints.enable": {
						"markdownDescription": "Whether to show inlay type hints for variables.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "inlayHints",
				"properties": {
					"wgsl-analyzer.inlayHints.typeHints.hideNamedConstructor": {
						"markdownDescription": "Whether to hide inlay type hints for constructors.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "joinLines",
				"properties": {
					"wgsl-analyzer.joinLines.joinAssignments": {
						"markdownDescription": "Join lines merges consecutive declaration and initialization of an assignment.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "joinLines",
				"properties": {
					"wgsl-analyzer.joinLines.joinElseIf": {
						"markdownDescription": "Join lines inserts else between consecutive ifs.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "joinLines",
				"properties": {
					"wgsl-analyzer.joinLines.removeTrailingComma": {
						"markdownDescription": "Join lines removes trailing commas.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "joinLines",
				"properties": {
					"wgsl-analyzer.joinLines.unwrapTrivialBlock": {
						"markdownDescription": "Join lines unwraps trivial blocks.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "lens",
				"properties": {
					"wgsl-analyzer.lens.enable": {
						"markdownDescription": "Whether to show CodeLens.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "lens",
				"properties": {
					"wgsl-analyzer.lens.implementations.enable": {
						"markdownDescription": "Whether to show `Implementations` lens. Only applies when `#wgsl-analyzer.lens.enable#` is set.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "lens",
				"properties": {
					"wgsl-analyzer.lens.location": {
						"markdownDescription": "Where to render annotations.",
						"default": "above_name",
						"type": "string",
						"enum": [
							"above_name",
							"above_whole_item"
						],
						"enumDescriptions": [
							"Render annotations above the name of the item.",
							"Render annotations above the whole item, including documentation comments and attributes."
						]
					}
				}
			},
			{
				"title": "lens",
				"properties": {
					"wgsl-analyzer.lens.references.adt.enable": {
						"markdownDescription": "Whether to show `References` lens for Struct, Enum, and Union.\nOnly applies when `#wgsl-analyzer.lens.enable#` is set.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "lens",
				"properties": {
					"wgsl-analyzer.lens.references.enumVariant.enable": {
						"markdownDescription": "Whether to show `References` lens for Enum Variants.\nOnly applies when `#wgsl-analyzer.lens.enable#` is set.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "lens",
				"properties": {
					"wgsl-analyzer.lens.references.method.enable": {
						"markdownDescription": "Whether to show `Method References` lens. Only applies when `#wgsl-analyzer.lens.enable#` is set.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "lens",
				"properties": {
					"wgsl-analyzer.lens.references.trait.enable": {
						"markdownDescription": "Whether to show `References` lens for Trait.\nOnly applies when `#wgsl-analyzer.lens.enable#` is set.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "lens",
				"properties": {
					"wgsl-analyzer.lens.run.enable": {
						"markdownDescription": "Whether to show `Run` lens. Only applies when `#wgsl-analyzer.lens.enable#` is set.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "general",
				"properties": {
					"wgsl-analyzer.linkedProjects": {
						"markdownDescription": "Disable project auto-discovery in favor of explicitly specified set of projects.\n\nElements must be paths pointing to `wesl.toml`, `.wgsl` files, or `.wesl` files (which will be treated as standalone files).",
						"default": [],
						"type": "array",
						"items": {
							"type": [
								"string",
								"object"
							]
						}
					}
				}
			},
			{
				"title": "lru",
				"properties": {
					"wgsl-analyzer.lru.capacity": {
						"markdownDescription": "Number of syntax trees wgsl-analyzer keeps in memory. Defaults to 128.",
						"default": null,
						"type": [
							"null",
							"integer"
						],
						"minimum": 0,
						"maximum": 65535
					}
				}
			},
			{
				"title": "lru",
				"properties": {
					"wgsl-analyzer.lru.query.capacities": {
						"markdownDescription": "Sets the LRU capacity of the specified queries.",
						"default": {},
						"type": "object"
					}
				}
			},
			{
				"title": "general",
				"properties": {
					"wgsl-analyzer.numThreads": {
						"markdownDescription": "How many worker threads in the main loop. The default `null` means to pick automatically.",
						"default": null,
						"anyOf": [
							{
								"type": "null"
							},
							{
								"type": "number",
								"minimum": 0,
								"maximum": 255
							},
							{
								"type": "string",
								"enum": [
									"physical",
									"logical"
								],
								"enumDescriptions": [
									"Use the number of physical cores",
									"Use the number of logical cores"
								]
							}
						]
					}
				}
			},
			{
				"title": "references",
				"properties": {
					"wgsl-analyzer.references.excludeImports": {
						"markdownDescription": "Exclude imports from find-all-references.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "wgslfmt",
				"properties": {
					"wgsl-analyzer.wgslfmt.extraArgs": {
						"markdownDescription": "Additional arguments to `wgslfmt`.",
						"default": [],
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			},
			{
				"title": "wgslfmt",
				"properties": {
					"wgsl-analyzer.wgslfmt.overrideCommand": {
						"markdownDescription": "Advanced option, fully override the command wgsl-analyzer uses for formatting. This should be the equivalent of `wgslfmt` here, and not that of `cargo wgslfmt`. The file contents will be passed on the standard input and the formatted result will be read from the standard output.",
						"default": null,
						"type": [
							"null",
							"array"
						],
						"items": {
							"type": "string"
						}
					}
				}
			},
			{
				"title": "wgslfmt",
				"properties": {
					"wgsl-analyzer.wgslfmt.rangeFormatting.enable": {
						"markdownDescription": "Enables the use of wgslfmt's unstable range formatting command for the `textDocument/rangeFormatting` request. The wgslfmt option is unstable.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "semanticHighlighting",
				"properties": {
					"wgsl-analyzer.semanticHighlighting.doc.comment.inject.enable": {
						"markdownDescription": "Inject additional highlighting into doc comments.\n\nWhen enabled, wgsl-analyzer will highlight WGSL/WESL source in doc comments as well as intra-doc links.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "semanticHighlighting",
				"properties": {
					"wgsl-analyzer.semanticHighlighting.nonStandardTokens": {
						"markdownDescription": "Whether the server is allowed to emit non-standard tokens and modifiers.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "semanticHighlighting",
				"properties": {
					"wgsl-analyzer.semanticHighlighting.operator.enable": {
						"markdownDescription": "Use semantic tokens for operators.\n\nWhen disabled, wgsl-analyzer will emit semantic tokens only for operator tokens when they are tagged with modifiers.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "semanticHighlighting",
				"properties": {
					"wgsl-analyzer.semanticHighlighting.operator.specialization.enable": {
						"markdownDescription": "Use specialized semantic tokens for operators.\n\nWhen enabled, wgsl-analyzer will emit special token types for operator tokens instead of the generic `operator` token type.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "semanticHighlighting",
				"properties": {
					"wgsl-analyzer.semanticHighlighting.punctuation.enable": {
						"markdownDescription": "Use semantic tokens for punctuation.\n\nWhen disabled, wgsl-analyzer will emit semantic tokens only for punctuation tokens when they are tagged with modifiers or have a special role.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "semanticHighlighting",
				"properties": {
					"wgsl-analyzer.semanticHighlighting.punctuation.specialization.enable": {
						"markdownDescription": "Use specialized semantic tokens for punctuation.\n\nWhen enabled, wgsl-analyzer will emit special token types for punctuation tokens instead of the generic `punctuation` token type.",
						"default": false,
						"type": "boolean"
					}
				}
			},
			{
				"title": "semanticHighlighting",
				"properties": {
					"wgsl-analyzer.semanticHighlighting.strings.enable": {
						"markdownDescription": "Use semantic tokens for strings.\n\nIn some editors (e.g. VS Code) semantic tokens override other highlighting grammars.\nBy disabling semantic tokens for strings, other grammars can be used to highlight their contents.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "signatureInfo",
				"properties": {
					"wgsl-analyzer.signatureInfo.detail": {
						"markdownDescription": "Show full signature of the callable. Only shows parameters if disabled.",
						"default": "full",
						"type": "string",
						"enum": [
							"full",
							"parameters"
						],
						"enumDescriptions": [
							"Show the entire signature.",
							"Show only the parameters."
						]
					}
				}
			},
			{
				"title": "signatureInfo",
				"properties": {
					"wgsl-analyzer.signatureInfo.documentation.enable": {
						"markdownDescription": "Show documentation.",
						"default": true,
						"type": "boolean"
					}
				}
			},
			{
				"title": "typing",
				"properties": {
					"wgsl-analyzer.typing.triggerChars": {
						"markdownDescription": "Specify the characters allowed to invoke special on typing triggers.\n- typing `=` after `let` tries to smartly add `;` if `=` is followed by an existing expression\n- typing `=` between two expressions adds `;` when in statement position\n- typing `=` to turn an assignment into an equality comparison removes `;` when in expression position\n- typing `.` in a chain method call auto-indents\n- typing `{` or `(` in front of an expression inserts a closing `}` or `)` after the expression\n- typing `{` in a use item adds a closing `}` in the right place\n- typing `>` to complete a return type `->` will insert a whitespace after it.",
						"default": "=.",
						"type": [
							"null",
							"string"
						]
					}
				}
			},
			{
				"title": "vfs",
				"properties": {
					"wgsl-analyzer.vfs.extraIncludes": {
						"markdownDescription": "Additional paths to include in the VFS.",
						"default": [],
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			},
			{
				"title": "workspace",
				"properties": {
					"wgsl-analyzer.workspace.symbol.search.kind": {
						"markdownDescription": "Workspace symbol search kind.",
						"default": "only_types",
						"type": "string",
						"enum": [
							"only_types",
							"all_symbols"
						],
						"enumDescriptions": [
							"Search for types only.",
							"Search for all symbols kinds."
						]
					}
				}
			},
			{
				"title": "workspace",
				"properties": {
					"wgsl-analyzer.workspace.symbol.search.limit": {
						"markdownDescription": "Limits the number of items returned from a workspace symbol search (Defaults to 128).\nSome clients like vs-code issue new searches on result filtering and don't require all results to be returned in the initial search.\nOther clients requires all results upfront and might require a higher limit.",
						"default": 128,
						"type": "integer",
						"minimum": 0
					}
				}
			},
			{
				"title": "workspace",
				"properties": {
					"wgsl-analyzer.workspace.symbol.search.scope": {
						"markdownDescription": "Workspace symbol search scope.",
						"default": "workspace",
						"type": "string",
						"enum": [
							"workspace",
							"workspace_and_dependencies"
						],
						"enumDescriptions": [
							"Search in current workspace only.",
							"Search in current workspace and dependencies."
						]
					}
				}
			},
			{
				"title": "$generated-end"
			}
		],
		"configurationDefaults": {
			"explorer.fileNesting.patterns": {}
		},
		"languages": [
			{
				"id": "wa_syntax_tree",
				"extensions": [
					".wast"
				]
			},
			{
				"id": "wgsl",
				"extensions": [
					".wgsl"
				],
				"aliases": [
					"WGSL"
				],
				"configuration": "language-configuration.json"
			},
			{
				"id": "wesl",
				"extensions": [
					".wesl"
				],
				"aliases": [
					"WESL"
				],
				"configuration": "language-configuration.json"
			}
		],
		"grammars": [
			{
				"language": "wgsl",
				"scopeName": "source.wgsl",
				"path": "./syntaxes/wgsl.tmLanguage.json"
			},
			{
				"language": "wesl",
				"scopeName": "source.wesl",
				"path": "./syntaxes/wesl.tmLanguage.json"
			},
			{
				"language": "wa_syntax_tree",
				"scopeName": "source.wa_syntax_tree",
				"path": "wa_syntax_tree.tmGrammar.json"
			}
		],
		"semanticTokenTypes": [
			{
				"id": "angle",
				"description": "Style for < or >",
				"superType": "punctuation"
			},
			{
				"id": "arithmetic",
				"description": "Style for arithmetic operators",
				"superType": "operator"
			},
			{
				"id": "attribute",
				"description": "Style for attributes"
			},
			{
				"id": "attributeOperator",
				"description": "Style for attribute invocation brackets, that is the `@`",
				"superType": "operator"
			},
			{
				"id": "bitwise",
				"description": "Style for bitwise operators",
				"superType": "operator"
			},
			{
				"id": "boolean",
				"description": "Style for boolean literals",
				"superType": "keyword"
			},
			{
				"id": "brace",
				"description": "Style for { or }",
				"superType": "punctuation"
			},
			{
				"id": "bracket",
				"description": "Style for [ or ]",
				"superType": "punctuation"
			},
			{
				"id": "builtinAttribute",
				"description": "Style for builtin attributes",
				"superType": "attribute"
			},
			{
				"id": "builtinType",
				"description": "Style for builtin types",
				"superType": "type"
			},
			{
				"id": "character",
				"description": "Style for character literals",
				"superType": "string"
			},
			{
				"id": "colon",
				"description": "Style for :",
				"superType": "punctuation"
			},
			{
				"id": "comma",
				"description": "Style for ,",
				"superType": "punctuation"
			},
			{
				"id": "comparison",
				"description": "Style for comparison operators",
				"superType": "operator"
			},
			{
				"id": "const",
				"description": "Style for consts",
				"superType": "variable"
			},
			{
				"id": "derive",
				"description": "Style for derives",
				"superType": "attribute"
			},
			{
				"id": "deriveHelper",
				"description": "Style for derive helpers",
				"superType": "attribute"
			},
			{
				"id": "dot",
				"description": "Style for .",
				"superType": "punctuation"
			},
			{
				"id": "escapeSequence",
				"description": "Style for char or byte escapes in strings"
			},
			{
				"id": "formatSpecifier",
				"description": "Style for {} placeholders in format strings"
			},
			{
				"id": "invalidEscapeSequence",
				"description": "Style for invalid char or byte escapes in strings"
			},
			{
				"id": "label",
				"description": "Style for labels"
			},
			{
				"id": "lifetime",
				"description": "Style for lifetimes"
			},
			{
				"id": "logical",
				"description": "Style for logic operators",
				"superType": "operator"
			},
			{
				"id": "parenthesis",
				"description": "Style for ( or )",
				"superType": "punctuation"
			},
			{
				"id": "punctuation",
				"description": "Style for generic punctuation"
			},
			{
				"id": "operator",
				"description": "Style for operators",
				"superType": "punctuation"
			},
			{
				"id": "semicolon",
				"description": "Style for ;",
				"superType": "punctuation"
			},
			{
				"id": "static",
				"description": "Style for statics",
				"superType": "variable"
			},
			{
				"id": "toolModule",
				"description": "Style for tool module attributes",
				"superType": "decorator"
			},
			{
				"id": "typeAlias",
				"description": "Style for type aliases",
				"superType": "type"
			},
			{
				"id": "unresolvedReference",
				"description": "Style for names which can not be resolved due to compilation errors"
			}
		],
		"semanticTokenModifiers": [],
		"semanticTokenScopes": [],
		"menus": {
			"commandPalette": [
				{
					"command": "wgsl-analyzer.viewFileText",
					"when": "inWeslProject"
				},
				{
					"command": "wgsl-analyzer.matchingBrace",
					"when": "inWeslProject"
				},
				{
					"command": "wgsl-analyzer.joinLines",
					"when": "inWeslProject"
				},
				{
					"command": "wgsl-analyzer.analyzerStatus",
					"when": "inWeslProject"
				},
				{
					"command": "wgsl-analyzer.memoryUsage",
					"when": "inWeslProject"
				},
				{
					"command": "wgsl-analyzer.reloadWorkspace",
					"when": "inWeslProject"
				},
				{
					"command": "wgsl-analyzer.restartServer",
					"when": "inWeslProject"
				},
				{
					"command": "wgsl-analyzer.onEnter",
					"when": "inWeslProject"
				},
				{
					"command": "wgsl-analyzer.ssr",
					"when": "inWeslProject"
				},
				{
					"command": "wgsl-analyzer.serverVersion",
					"when": "inWeslProject"
				},
				{
					"command": "wgsl-analyzer.openDocs",
					"when": "inWeslProject"
				},
				{
					"command": "wgsl-analyzer.viewMemoryLayout",
					"when": "inWeslProject"
				},
				{
					"command": "wgsl-analyzer.toggleLSPLogs",
					"when": "inWeslProject"
				},
				{
					"command": "wgsl-analyzer.openWalkthrough"
				},
				{
					"command": "wgsl-analyzer.syntaxTreeReveal",
					"when": "false"
				},
				{
					"command": "wgsl-analyzer.syntaxTreeCopy",
					"when": "false"
				},
				{
					"command": "wgsl-analyzer.syntaxTreeHideWhitespace",
					"when": "false"
				},
				{
					"command": "wgsl-analyzer.syntaxTreeShowWhitespace",
					"when": "false"
				}
			],
			"editor/context": [
				{
					"command": "wgsl-analyzer.openDocs",
					"when": "inWeslProject && editorTextFocus && (editorLangId == wgsl || editorLangId == wesl)",
					"group": "navigation@1001"
				}
			],
			"view/title": [
				{
					"command": "wgsl-analyzer.syntaxTreeHideWhitespace",
					"group": "navigation",
					"when": "view == weslSyntaxTree && !weslSyntaxTree.hideWhitespace"
				},
				{
					"command": "wgsl-analyzer.syntaxTreeShowWhitespace",
					"group": "navigation",
					"when": "view == weslSyntaxTree && weslSyntaxTree.hideWhitespace"
				}
			],
			"view/item/context": [
				{
					"command": "wgsl-analyzer.syntaxTreeCopy",
					"group": "inline",
					"when": "view == weslSyntaxTree"
				},
				{
					"command": "wgsl-analyzer.syntaxTreeReveal",
					"group": "inline",
					"when": "view == weslSyntaxTree"
				}
			]
		},
		"views": {
			"explorer": [
				{
					"icon": "$(package)",
					"id": "weslImports",
					"name": "WGSL/WESL Imports",
					"when": "inWeslProject && config.wgsl-analyzer.showImportsExplorer"
				}
			],
			"weslSyntaxTreeContainer": [
				{
					"icon": "$(file-code)",
					"id": "weslSyntaxTree",
					"name": "WGSL/WESL Syntax Tree",
					"when": "inWeslProject && config.wgsl-analyzer.showSyntaxTree"
				}
			]
		},
		"viewsContainers": {
			"activitybar": [
				{
					"id": "weslSyntaxTreeContainer",
					"title": "WGSL/WESL Syntax Tree",
					"icon": "$(list-tree)"
				}
			]
		}
	}
}
