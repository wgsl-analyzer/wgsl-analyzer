{
	"name": "wgsl-analyzer",
	"description": "WGSL support for Visual Studio Code",
	"displayName": "wgsl-analyzer",
	"private": true,
	"icon": "icon.png",
	"version": "0.11.0-dev",
	"releaseTag": null,
	"publisher": "wgsl-analyzer",
	"type": "commonjs",
	"repository": {
		"type": "git",
		"url": "https://github.com/wgsl-analyzer/wgsl-analyzer"
	},
	"homepage": "https://wgsl-analyzer.github.io/",
	"license": "MIT OR Apache-2.0",
	"keywords": [
		"wgsl",
		"shading",
		"web"
	],
	"categories": [
		"Formatters",
		"Programming Languages",
		"Linters"
	],
	"capabilities": {
		"untrustedWorkspaces": {
			"supported": false,
			"description": "wgsl-analyzer invokes binaries set up by its configuration. A malicious actor could exploit this to run arbitrary code on your machine."
		}
	},
	"engines": {
		"vscode": "^1.97.0"
	},
	"enabledApiProposals": [],
	"scripts": {
		"vscode:prepublish": "npm run build-base -- --minify",
		"package": "vsce package -o wgsl-analyzer.vsix",
		"build-base": "esbuild ./src/main.ts --bundle --outfile=out/main.js --external:vscode --format=cjs --platform=node --target=node22",
		"build": "npm run build-base -- --sourcemap",
		"watch": "npm run build-base -- --sourcemap --watch",
		"format": "node --experimental-strip-types node_modules/prettier/bin/prettier.cjs . --write",
		"format:check": "node --experimental-strip-types node_modules/prettier/bin/prettier.cjs . --check",
		"lint": "eslint .",
		"lint:fix": "npm run lint -- --fix",
		"typecheck": "tsc",
		"pretest": "npm run typecheck && npm run build",
		"test": "node ./out/tests/runTests.js"
	},
	"dependencies": {
		"@hpcc-js/wasm": "^2.22.4",
		"anser": "^2.3.2",
		"d3": "^7.9.0",
		"d3-graphviz": "^5.6.0",
		"jiti": "^2.4.2",
		"vscode-languageclient": "^9.0.1"
	},
	"devDependencies": {
		"@eslint/js": "^9.23.0",
		"@stylistic/eslint-plugin-js": "^4.2.0",
		"@stylistic/eslint-plugin": "^4.2.0",
		"@tsconfig/strictest": "^2.0.5",
		"@types/node": "~22.13.14",
		"@types/vscode": "~1.97.0",
		"@typescript-eslint/eslint-plugin": "^8.28.0",
		"@typescript-eslint/parser": "^8.28.0",
		"@vscode/test-electron": "^2.4.1",
		"@vscode/vsce": "^3.3.1",
		"esbuild": "^0.25.1",
		"eslint-config-prettier": "^10.1.1",
		"eslint-define-config": "^2.1.0",
		"eslint": "^9.23.0",
		"node-fetch": "^3.3.2",
		"ovsx": "0.10.1",
		"prettier": "^3.5.3",
		"tslib": "^2.8.1",
		"typescript-eslint": "^8.28.0",
		"typescript": "^5.8.2"
	},
	"main": "./out/main.js",
	"activationEvents": [
		"workspaceContains:*/*.wgsl"
	],
	"contributes": {
		"languages": [
			{
				"id": "wgsl",
				"extensions": [
					".wgsl"
				],
				"aliases": [
					"WGSL"
				],
				"configuration": "./language-configuration.json"
			},
			{
				"id": "wgsl_syntax_tree",
				"extensions": [
					".wgslst"
				]
			}
		],
		"grammars": [
			{
				"language": "wgsl",
				"scopeName": "source.wgsl",
				"path": "./syntaxes/wgsl.tmLanguage.json"
			}
		],
		"commands": [
			{
				"command": "wgsl-analyzer.syntaxTree",
				"title": "Show Syntax Tree",
				"category": "WGSL Analyzer"
			},
			{
				"command": "wgsl-analyzer.debugCommand",
				"title": "Debug command",
				"category": "WGSL Analyzer"
			},
			{
				"command": "wgsl-analyzer.fullSource",
				"title": "Show full WGSL source",
				"category": "WGSL Analyzer"
			}
		],
		"configuration": {
			"title": "WGSL analyzer",
			"properties": {
				"wgsl-analyzer.server.path": {
					"type": [
						"null",
						"string"
					],
					"description": "Path to the wgsl-analyzer executable."
				},
				"wgsl-analyzer.diagnostics.typeErrors": {
					"type": "boolean",
					"default": true,
					"description": "Controls whether to show type errors."
				},
				"wgsl-analyzer.diagnostics.nagaParsingErrors": {
					"type": "boolean",
					"default": false,
					"description": "Controls whether to show naga's parsing errors."
				},
				"wgsl-analyzer.diagnostics.nagaValidationErrors": {
					"type": "boolean",
					"default": true,
					"description": "Controls whether to show naga's validation errors."
				},
				"wgsl-analyzer.diagnostics.nagaVersion": {
					"type": "string",
					"enum": [
						"0.14",
						"0.19",
						"0.22",
						"main"
					],
					"default": "0.22",
					"description": "Which version of naga to use for its diagnostics"
				},
				"wgsl-analyzer.customImports": {
					"type": "object",
					"additionalProperties": {
						"type": "string"
					},
					"default": {},
					"markdownDescription": "`#import` directives in the flavor of [Bevy Engine](https://bevyengine.org)'s [shader preprocessor](https://bevyengine.org/news/bevy-0-6/#shader-imports). To use objects from an import, add `#import <name>` to your WGSL."
				},
				"wgsl-analyzer.preprocessor.shaderDefs": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"default": [],
					"markdownDescription": "Shader defines used in `#ifdef` directives in the flavor of [Bevy Engine](https://bevyengine.org)'s [shader preprocessor](https://bevyengine.org/news/bevy-0-6/#shader-imports)."
				},
				"wgsl-analyzer.trace.extension": {
					"type": "boolean",
					"default": false,
					"description": "Log debug info in the WGSL Analyzer output pane."
				},
				"wgsl-analyzer.trace.server": {
					"type": "boolean",
					"default": false,
					"description": "Log messages between client and server in the WGSL Analyzer output pane."
				},
				"wgsl-analyzer.inlayHints.enabled": {
					"type": "boolean",
					"default": true,
					"description": "Whether to show inlay hints"
				},
				"wgsl-analyzer.inlayHints.typeHints": {
					"type": "boolean",
					"default": true,
					"description": "Whether to show inlay hints for types of variable declarations"
				},
				"wgsl-analyzer.inlayHints.parameterHints": {
					"type": "boolean",
					"default": true,
					"description": "Whether to show inlay hints for the names of function parameters"
				},
				"wgsl-analyzer.inlayHints.structLayoutHints": {
					"type": "boolean",
					"default": false,
					"description": "Whether to show inlay hints for the layout of struct fields"
				},
				"wgsl-analyzer.inlayHints.typeVerbosity": {
					"type": "string",
					"enum": [
						"full",
						"compact",
						"inner"
					],
					"enumDescriptions": [
						"e.g. ref<uniform, f32, read_write>",
						"e.g. ref<f32>",
						"e.g. f32"
					],
					"default": "compact"
				}
			}
		}
	}
}
